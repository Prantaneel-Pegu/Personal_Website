---
import Button from '~/components/ui/Button.astro';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Employment } from '~/types';

export interface Props {
    items?: Array<Employment>;
    defaultIcon?: string;
    classes?: Record<string, string>;
}

const { items = [], classes = {}, defaultIcon } = Astro.props as Props;

const {
    container: containerClass = '',
    panel: panelClass = '',
    title: titleClass = '',
    description: descriptionClass = '',
    icon: defaultIconClass = 'text-primary dark:text-slate-200 border-primary dark:border-blue-700',
} = classes;
---

{
    items && items.length > 0 && (
        <div class={containerClass}>
            {items.map(({ title, description, icon, classes: itemClasses = {}, callToAction }, index = 0) => (
                <div
                    class={twMerge(
                        'flex intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
                        panelClass,
                        itemClasses?.panel
                    )}
                >
                    <div class="flex flex-col items-center mr-4 rtl:mr-0 rtl:ml-4">
                        <div>
                            <div class="flex items-center justify-center">
                                {(icon || defaultIcon) && (
                                    <Icon
                                        name={icon || defaultIcon}
                                        class={twMerge(
                                            'w-10 h-10 p-2 rounded-full border-2',
                                            defaultIconClass,
                                            itemClasses?.icon
                                        )}
                                    />
                                )}
                            </div>
                        </div>
                        {index !== items.length - 1 && <div class="w-px h-full bg-black/10 dark:bg-slate-400/50" />}
                    </div>

                    <div class={`pt-1 ${index !== items.length - 1 ? 'pb-8' : ''}`}>
                        <div class="flex ">
                            {title && (
                                <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>
                                    <span>{title.role}</span>
                                    <br />

                                    <div class="flex font-normal gap-14 items-center">
                                        <span>{title.company}</span>
                                        <Button
                                            variant="link"
                                            class={
                                                'text-primary hover:underline text-base translate-y-[0.25px] max-[768px]:hidden'
                                            }
                                            {...callToAction}
                                        />
                                    </div>

                                    <span class="text-sm font-normal">{title.duration}</span>

                                    <div class="font-normal mt-2 min-[768px]:hidden">
                                        <Button variant="link" class={'text-primary text-base'} {...callToAction} />
                                    </div>
                                </div>
                            )}
                        </div>

                        {description && (
                            <p
                                class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}
                                set:html={description}
                            />
                        )}
                    </div>
                </div>
            ))}
        </div>
    )
}
