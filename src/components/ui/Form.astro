---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';
import { getPermalink } from '~/utils/permalinks';

const { inputs, textarea, disclaimer, button = 'Contact Me', description = '' } = Astro.props;
---

<form method="POST" id="contact-form" data-api-url={getPermalink('/api/contact-form-handler')}>
    {
        inputs &&
            inputs.map(
                ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
                    name && (
                        <div class="mb-8">
                            {label && (
                                <label for={name} class="block text-sm mb-2 font-medium">
                                    {label}
                                </label>
                            )}
                            <input
                                required
                                type={type}
                                name={name}
                                id={name}
                                autocomplete={autocomplete}
                                placeholder={placeholder}
                                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                            />
                        </div>
                    )
            )
    }

    {
        textarea && (
            <div>
                <label for="textarea" class="block text-sm mb-2 font-medium">
                    {textarea.label}
                </label>
                <textarea
                    required
                    id="textarea"
                    name={textarea.name ? textarea.name : 'message'}
                    rows={textarea.rows ? textarea.rows : 4}
                    placeholder={textarea.placeholder}
                    class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                />
            </div>
        )
    }

    {
        disclaimer && (
            <div class="mt-6 flex items-start">
                <div class="flex mt-[1.5px]">
                    <input
                        id="disclaimer"
                        name="disclaimer"
                        type="checkbox"
                        required
                        class="cursor-pointer mt-1 py-3 px-4 block size-4 text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                    />
                </div>
                <div class="ml-3">
                    <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
                        {disclaimer.label}
                    </label>
                </div>
            </div>
        )
    }

    <p id="submit-result" class="text-center mt-8 -mb-4 hidden">Message sent successfully.</p>

    {
        button && (
            <div class="mt-12 grid">
                <Button variant="primary" type="submit">
                    {button}
                </Button>
            </div>
        )
    }

    {
        description && (
            <div class="mt-6 text-center max-[636px]:mb-2">
                <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
            </div>
        )
    }
</form>

<script type="module">
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('contact-form');
        const submitResult = document.getElementById('submit-result');

        form?.addEventListener('submit', async (event) => {
            event.preventDefault();
            const formData = new FormData(form);

            try {
                const res = await fetch(form.dataset.apiUrl, {
                    method: 'POST',
                    body: formData,
                });

                submitResult.classList.remove('text-green-500', 'text-red-500');

                if (res.ok) {
                    form.reset();
                    submitResult.classList.add('text-green-500');
                    submitResult.innerText = 'Message sent successfully.';
                    submitResult.style.display = 'block';
                } else {
                    form.reset();
                    submitResult.classList.add('text-red-500');
                    submitResult.innerText = 'Internal Error. Form submission failed.';
                    submitResult.style.display = 'block';
                }
            } catch (err) {
                console.error('Error submitting form:', err);
                form.reset();
                submitResult.classList.remove('text-green-500', 'text-red-500');
                submitResult.classList.add('text-red-500');
                submitResult.innerText = 'Internal Error. Form submission failed.';
                submitResult.style.display = 'block';
            }
        });
    });
</script>
